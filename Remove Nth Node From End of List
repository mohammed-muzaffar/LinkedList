class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
    //Most Optimize solution
        
        ListNode start = new ListNode();
        start.next = head;
        ListNode fast = start;
        ListNode slow = start;
        
        for(int i = 1; i <= n; i++)
            fast = fast.next;
        
        while(fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        
        slow.next = slow.next.next;
        
        return start.next;
    }
}

Time Complexity O(n) and Space Complexity O(1)


//Brute Force Solution


class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
       
         if(head == null) return head;
        
         int size = 1;
         ListNode currentNode = head;
         while(currentNode.next != null){
             size++;
         }
        
         if(n == size){
             return head.next;
         }
        
         int indexSearch = size - n;
         ListNode prev = head;
         int i = 1;
         while(i < indexSearch){
             prev = prev.next;
            i++;
         }
        prev.next = prev.next.next;
         return head;
        
     }
}      

Time Complexity O(2n) and Space Complexity O(1)
