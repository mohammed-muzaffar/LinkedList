
//Optimal Solution without extra space
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
     
        
         // optimal solution without extra space
        if(list1 == null && list2 == null){
             return null;
         }
        
         if(list1 == null){
             return list2;
         }
        
         if(list2 == null){
             return list1;
         }
        
         if(list1.val > list2.val){
             ListNode temp = list1;
             list1 = list2;
             list2 = temp;
         }
        
         ListNode result = list1;
        
         while( list1 != null && list2 != null){
           
           ListNode temp = new ListNode();
            
             while(list1 != null && list1.val < list2.val){
                 temp = list1;
                 list1 = list1.next;
             }
            
             temp.next = list2;
            
             //swap 
             ListNode temporaryNode = list1;
             list1 = list2;
             list2 = temporaryNode;
            
         }
        
         return result;
     }
 }    
        
        
Time Complexity O(n1+n2) and Space Complexity O(1)
        
        
        
        
        
     
        
   // Brute Force using extra space        
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
    
       if(list1 == null && list2 == null) 
         return null;
        
      if(list1 == null)
          return list2;
        
      if(list2 == null)
          return list1;
        
        ListNode result = new ListNode();
        ListNode prev = result;
        
        while(list1 != null && list2 != null){
            if(list1.val < list2.val){
                prev.next = list1;
                list1 = list1.next;
            } else {
                prev.next = list2;
                list2 = list2.next;
            }
            prev = prev.next;
        }
        
        if(list1 != null){
            prev.next = list1;
        }
        
        if(list2 != null){
            prev.next = list2;
        }
        
        return result.next;
    }
}

Time Complexity O(n1+n2) and Space Complexity O(n1+n2)
